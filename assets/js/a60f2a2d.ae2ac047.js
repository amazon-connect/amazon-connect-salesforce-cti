"use strict";(self.webpackChunkamazon_connect_salesforce_cti=self.webpackChunkamazon_connect_salesforce_cti||[]).push([[269],{1704:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var o=t(8168),a=(t(6540),t(5680)),i=t(6025);const r={id:"03-cti-flows",title:"CTI Flow"},s=void 0,l={unversionedId:"lightning/cti-adapter/03-cti-flows",id:"lightning/cti-adapter/03-cti-flows",title:"CTI Flow",description:"The CTI Adapter provides a mechanism to customize the behavior of the",source:"@site/docs/lightning/03-cti-adapter/03-cti-flows.md",sourceDirName:"lightning/03-cti-adapter",slug:"/lightning/cti-adapter/03-cti-flows",permalink:"/amazon-connect-salesforce-cti/docs/lightning/cti-adapter/03-cti-flows",draft:!1,editUrl:"https://github.com/amazon-connect/amazon-connect-salesforce-cti/docs/lightning/03-cti-adapter/03-cti-flows.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"03-cti-flows",title:"CTI Flow"},sidebar:"lightning",previous:{title:"CTI Attributes",permalink:"/amazon-connect-salesforce-cti/docs/lightning/cti-adapter/02-cti-attributes"},next:{title:"Presence Sync Rules",permalink:"/amazon-connect-salesforce-cti/docs/lightning/cti-adapter/04-presence-sync-rules"}},c={},u=[{value:"Create CTI Flow",id:"create-cti-flow",level:2},{value:"Accessing CTI Flow Block Values",id:"accessing-cti-flow-block-values",level:2},{value:"JSON Paths",id:"json-paths",level:3},{value:"Accessing Object Properties",id:"accessing-object-properties",level:3},{value:"Accessing CTI Flow Object Properties",id:"accessing-cti-flow-object-properties",level:3},{value:"Why Would I Use This?",id:"why-would-i-use-this",level:3}],p={toc:u},g="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(g,(0,o.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"The CTI Adapter provides a mechanism to customize the behavior of the\nadapter based on your business needs without needing to edit the\nunderlying Visualforce pages, which could negatively impact overall\nadapter function. This is accomplished through CTI Flows."),(0,a.yg)("p",null,'A CTI Flow consist of "actions" that represent an API call to parts of\nSalesforce or Amazon Connect API. Like a JavaScript function, each\naction can take inputs and provide outputs, or returns values, that you\ncan use from other actions.'),(0,a.yg)("h2",{id:"create-cti-flow"},"Create CTI Flow"),(0,a.yg)("p",null,"To create a new CTI Flow, log in into your Salesforce org and go to the\n",(0,a.yg)("strong",{parentName:"p"},"Service Console.")," Expand the ",(0,a.yg)("strong",{parentName:"p"},"navigation menu")," by selecting the\ndown arrow and choose ",(0,a.yg)("strong",{parentName:"p"},"AC CTI Adapters"),"."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image114.png")}),(0,a.yg)("p",null,"Select ",(0,a.yg)("strong",{parentName:"p"},"ACLightningAdapter.")," Scroll down to the ",(0,a.yg)("strong",{parentName:"p"},"CTI Flows")," section\nand select New to create a new CTI Script."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image133.png")}),(0,a.yg)("p",null,"Provide a user-friendly name in the ",(0,a.yg)("strong",{parentName:"p"},"CTI Flow Name")," field. And click\n",(0,a.yg)("strong",{parentName:"p"},"Save"),"."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image134.png")}),(0,a.yg)("p",null,"This will take you to a form where you can fill in name and adapter of\nthe CTI Flow. There are a couple of fields that you may be unfamiliar\nwith: ",(0,a.yg)("strong",{parentName:"p"},"Source")," and ",(0,a.yg)("strong",{parentName:"p"},"Event"),"."),(0,a.yg)("p",null,"Let's look at ",(0,a.yg)("strong",{parentName:"p"},"Source")," field first."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image135.png")}),(0,a.yg)("p",null,'You can think of Source as the "origin" of the CTI Flow. There are\ncurrently 7 sources: Initialization, an Agent on Connect, Voice Contact\non Connect, Queue Callback Contact on Connect, Chat on Connect,\nSalesforce Agent or Salesforce UI.'),(0,a.yg)("p",null,"Each source comes with a set of events that you can hook into, i.e. your\nCTI Flow will be executed when one of these events fire. Typically, you\nwill have only one flow for a combination of a source and an event. (You\ncan find out more about sources and events in ",(0,a.yg)("a",{parentName:"p",href:"/docs/lightning/appendices/appendix-c-cti-flow-sources-and-events/01-cti-flow-sources-and-events"},"Appendix C - CTI Flow Sources and Events"),".)"),(0,a.yg)("p",null,"For the purposes of this example, we selected ",(0,a.yg)("strong",{parentName:"p"},"Amazon Connect Voice\nContact")," source and ",(0,a.yg)("strong",{parentName:"p"},"onConnecting")," event. Now click Save and on the\nnext page scroll down till you find the ",(0,a.yg)("strong",{parentName:"p"},"CTI Flow")," section."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image136.png")}),(0,a.yg)("p",null,"Let's build a CTI Flow that opens a screenpop in Salesforce when a voice\ncall comes."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image137.png")}),(0,a.yg)("p",null,"You can start using by dragging the item called ",(0,a.yg)("strong",{parentName:"p"},"CTI Block")," from the sidebar in the Main Menu over the stage,\nwhich is marked by a grid pattern."),(0,a.yg)("p",null,"When you drop the block, you will see a modal titled ",(0,a.yg)("strong",{parentName:"p"},"Explorer"),". This\nmodal contains a list of actions you can choose from."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image138.png")}),(0,a.yg)("p",null,"In the ",(0,a.yg)("strong",{parentName:"p"},"Search")," field, search for ",(0,a.yg)("strong",{parentName:"p"},"Phone")," and Select the action\ncalled ",(0,a.yg)("strong",{parentName:"p"},"Get Customer Phone Number")," from the results on the right."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image139.png")}),"You should now see a block on the stage for the action you selected, and the sidebar will display some information about this action, including its return value.",(0,a.yg)("p",null,"(Note: If you'd like to change the label of the action, doubleclick on\nit. This will open a text editor. Make your changes and when you're\nfinished click outside the node to save your label.)"),(0,a.yg)("p",null,"Some actions can be configured using input fields to provide arguments\nto function calls, as well. This action does not have any input fields,\nand returns two values ---- ",(0,a.yg)("strong",{parentName:"p"},"phone")," and ",(0,a.yg)("strong",{parentName:"p"},"country"),"."),(0,a.yg)("p",null,"Now let's drag another CTI Block over the stage and find an action\ncalled ",(0,a.yg)("strong",{parentName:"p"},"Search and Screenpop"),"."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image140.png")}),(0,a.yg)("p",null,'Connect these blocks by clicking the green socket (green means "done")\non ',(0,a.yg)("strong",{parentName:"p"},"Get Customer Phone"),", which will display a blue line that tracks\nyour mouse cursor around the stage."),(0,a.yg)("p",null,"Now, click on the pink socket, i.e. the ",(0,a.yg)("strong",{parentName:"p"},"input")," socket, which is to\nthe left of the ",(0,a.yg)("strong",{parentName:"p"},"Search and Screenpop")," block. If the connection is\nsuccessful, the sockets fill turn into a solid color and the blue line\nwill connect them. (There are some restrictions on which sockets you can\nconnect together. For example, you cannot connect output of an action to\nits own input socket or connect two inputs.) If you are not happy with\nthis connection, you can hover over it and double click to remove."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image141.png")}),(0,a.yg)("p",null,"Now we'd like to get the phone number of the customer and use it in\n",(0,a.yg)("strong",{parentName:"p"},"Search and Screenpop"),". Here is a tip: if two actions are connected,\nyou can use the return values of the first action in the input fields of\nthe next action. (You can even use the return values of actions\nconnected to the last action, and the ones connected to that, and so\non.)"),(0,a.yg)("p",null,'This action has only two options, and we want to use the one called\n"phone" for this field.'),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image142.png")}),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image143.png")}),"If you want to enter a custom input value, you can type that, and select **Add New Value** from the dropdown.",(0,a.yg)("p",null,"And make sure to set ",(0,a.yg)("strong",{parentName:"p"},"callType"),' to "inbound." Finally, add the\n',(0,a.yg)("strong",{parentName:"p"},"Start")," and ",(0,a.yg)("strong",{parentName:"p"},"End")," nodes and connect everything together."),(0,a.yg)("img",{src:(0,i.A)("/img/lightning/image144.png")}),(0,a.yg)("p",null,"When you're finished, click ",(0,a.yg)("strong",{parentName:"p"},"Save")," in the sidebar. That's it. You\ncreated your first CTI Flow."),(0,a.yg)("p",null,"To test your flow, go to your ",(0,a.yg)("strong",{parentName:"p"},"Service Console"),", and make a call from\na number that is in the profile of a Contact. As the call is displayed\nin your CCP dashboard, Salesforce will pop open the contact of the\ncaller in a separate tab."),(0,a.yg)("h2",{id:"accessing-cti-flow-block-values"},"Accessing CTI Flow Block Values"),(0,a.yg)("p",null,"Internally, CTI flows are organized as JavaScript Object Notation (JSON) objects, and access to them is facilitated through JSON Paths."),(0,a.yg)("h3",{id:"json-paths"},"JSON Paths"),(0,a.yg)("p",null,"JSON paths help you find specific data within a JSON structure, similar to giving directions to locate hidden treasure on a map."),(0,a.yg)("p",null,"Basic Syntax:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Use dot notation (.) to traverse through object properties."),(0,a.yg)("li",{parentName:"ul"},"Use square brackets ([]) to index into arrays.")),(0,a.yg)("h3",{id:"accessing-object-properties"},"Accessing Object Properties"),(0,a.yg)("p",null,"Consider this JSON object below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n  "name": "John",\n  "age": 25,\n  "address": {\n    "city": "New York",\n    "zip": "10001"\n  }\n}\n')),(0,a.yg)("p",null,'To retrieve the value of the "name" field in this JSON object, you would utilize ',(0,a.yg)("inlineCode",{parentName:"p"},"$.name"),'. The same approach applies to accessing the value of "age" through ',(0,a.yg)("inlineCode",{parentName:"p"},"$.age"),'. If you wish to access the "city" value, you would use ',(0,a.yg)("inlineCode",{parentName:"p"},"$.address.city"),"."),(0,a.yg)("p",null,"Consider this next JSON Object:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n  "fruits": ["apple", "orange", "banana"]\n}\n\n')),(0,a.yg)("p",null,"To access the different fruits, you should use the following format: ",(0,a.yg)("inlineCode",{parentName:"p"},"$.fruits[0]")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"$.fruits[2]"),'. It\'s important to note that the first element (apple) is accessed with "0" rather than "1" due to arrays starting their indexing from 0.'),(0,a.yg)("h3",{id:"accessing-cti-flow-object-properties"},"Accessing CTI Flow Object Properties"),(0,a.yg)("p",null,"Having covered the fundamental concepts of accessing JSON objects, here is an illustration of a CTI flow JSON:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'LogUtils.ts:41 [CTI ADAPTER]: [FLOW] [AC_clickToDialFlow]: actions: {"uid-0":{"success":true,"results":null,"exception":null},"uid-39":{"success":true,"results":{"value":{"number":"+12345678900"}},"exception":null},"uid-29":{"success":true,"results":true,"exception":null},"uid-16":{"success":true,"results":{"value":"+12345678900"},"exception":null},"uid-54":{"success":true,"results":{"endpointARN":null,"endpointId":null,"type":"phone_number","name":null,"phoneNumber":"+12345678900","agentLogin":null,"queue":null},"exception":null},"uid-44":{"success":true,"results":null,"exception":null},"uid-18":{"success":true,"exception":null}, uid-17":{\u201csuccess\u201d:true,\u201cresults\u201d:{\u201cvalue\u201d:{\u201ctype\u201d:\u201cTask\u201d,\u201cId\u201d:null,\u201cCustomField__c\u201d:\u201cRandomMessage\u201d}, "uid-20":{"success":true,"results":null,"exception":null}}}}\n')),(0,a.yg)("p",null,"It is presented in this format typically, but for this demo, it will be more convenient to conceptualize it like this (condensed for brevity):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'{\n   "actions":{\n      "uid-39":{\n         "success":true,\n         "results":{\n            "value":{\n               "number":"+12345678900\u201c\n            }\n         },\n         "exception":null\n      },\n      "uid-29":{\n         "success":true,\n         "results":true,\n         "exception":null\n      },\n      "uid-54":{\n         "success":true,\n         "results":{\n            "endpointARN":null,\n            "endpointId":null,\n            "type":"phone_number",\n            "name":null,\n            "phoneNumber":"+12345678900",\n            "agentLogin":null,\n            "queue":null\n         },\n         "exception":null\n      },\n      "uid-17": {\n         "success":true,\n         "results": {\n            "value": {\n               "type":"Task",\n               "Id":null,\n               "CustomField__c":"RandomMessage"\n            },\n          }\n      }\n   }\n}\n')),(0,a.yg)("p",null,'Similar to the approach used for accessing values in smaller JSON objects, you can apply the same methodology here. To retrieve the phone number in the CTI flow block with "uid-54," you can use the following syntax: ',(0,a.yg)("inlineCode",{parentName:"p"},"$.actions.uid-54.results.phoneNumber"),"."),(0,a.yg)("p",null,'For certain CTI flow blocks, the return values can be more intricate. Take, for instance, the CTI flow block with "uid-17," which generates a Task record in Salesforce. To access the values ',(0,a.yg)("inlineCode",{parentName:"p"},"type"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Id"),", or ",(0,a.yg)("inlineCode",{parentName:"p"},"CustomField__c"),", you need to use the format: ",(0,a.yg)("inlineCode",{parentName:"p"},"$.actions.uid-17.results.value.[0].CustomField__c"),'. The use of "',"[0]",'" is essential in this case, as the particular CTI flow block can return multiple Task objects stored as an array.'),(0,a.yg)("p",null,"Note: It's crucial to verify the return values of a CTI flow object before attempting to access its value, as not every CTI flow block returns a value. Otherwise, you may receive ",(0,a.yg)("inlineCode",{parentName:"p"},"undefined"),", indicating the requested value does not exist."),(0,a.yg)("h3",{id:"why-would-i-use-this"},"Why Would I Use This?"),(0,a.yg)("p",null,"In most instances, direct access to CTI flow values is unnecessary, as return values are selectable through a dropdown menu in the CTI flow block. "),(0,a.yg)("p",null,'However, for scenarios where the dropdown menu is inaccessible, such as with CTI flow blocks like "Send Data to CCP Overlay," accessing the value directly becomes more practical.'),(0,a.yg)("img",{src:(0,i.A)("/img/shared/JSONAccess1.png")}),(0,a.yg)("img",{src:(0,i.A)("/img/shared/JSONAccess2.png")}))}d.isMDXComponent=!0},5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>h});var o=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,h=p["".concat(l,".").concat(d)]||p[d]||g[d]||i;return t?o.createElement(h,r(r({ref:n},u),{},{components:t})):o.createElement(h,r({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);